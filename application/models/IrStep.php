<?php

/**
 * IrStep
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 */
class IrStep extends BaseIrStep
{
    /**
     * Override parent to make room for new step
     *
     * @param Doctrine_Query $openGapQr Optional, default to null, used primarily for testing
     * @param Doctrine_Event $event
     * @param return void
     */
    public function preInsert($event, $openGapQr = null)
    {
        $this->_openGap($this->workflowId, $this->cardinality, $openGapQr);
    }

    /**
     * Override parent to implement shuffling over steps around to make room for this step.
     * Should only have an effect when workflowId and/or cardinality are modified
     *
     * @param Doctrine_Event $event
     * @return void
     */
    public function preUpdate($event)
    {
        $oldValues = $this->getModified(true);
        $wfChanged = isset($oldValues['workflowId']);
        $carChanged = isset($oldValues['cardinality']);
        // when the workflow changes, we need to close the gap in the old workflow and open a gap in the new one
        if ($wfChanged || $carChanged) {
            $oldWf = $wfChanged ? $oldValues['workflowId'] : $this->workflowId;
            $oldCar = $carChanged ? $oldValues['cardinality'] : $this->cardinality;
            // first, close the gap
            $this->_closeGap($oldWf, $oldCar);
            // now open a gap in the target workflow
            $this->_openGap($this->workflowId, $this->cardinality);
        }
    }

    /**
     * Override parent to close gap left by removing step
     *
     * @param Doctrine_Event $event
     * @param Doctrine_Query $clsGapQr Optional, default to null, used primarily for testing
     * @return void
     */
    public function postDelete($event, $clsGapQr = null)
    {
        $i = $event->getInvoker();
        $this->_closeGap($i->workflowId, $i->cardinality, $clsGapQr);
    }

    /**
     * Open a gap in a workflow to insert a step
     *
     * @param int $workflowId ID of workflow within which to open the gap
     * @param int $position   Position in workflow where the gap should be created
     * @return void
     * @deprecated pending on the removal of executions from model classes
     */
    protected function _openGap($workflowId, $position, $openGapQr = null)
    {
        $openGapQr = (isset($openGapQr)) ? $openGapQr : Doctrine::getTable('IrStep')->openGapQr($workflowId, $position);
        $openGapQr->execute(); 
    }

    /**
     * Close a gap in a workflow to insert a step
     *
     * @param int $workflowId ID of workflow in which to perform the operation
     * @param int $position   Position of the gap to be closed.
     * @return void
     * @deprecated pending on the removal of executions from model classes
     */
    protected function _closeGap($workflowId, $position, $clsGapQr = null)
    {
        $clsGapQr = (isset($clsGapQr)) ? $clsGapQr : Doctrine::getTable('IrStep')->clsGapQr($workflowId, $position);
        $clsGapQr->execute(); 
    }
}
