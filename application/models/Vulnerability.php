<?php
/**
 * Copyright (c) 2011 Endeavor Systems, Inc.
 *
 * This file is part of OpenFISMA.
 *
 * OpenFISMA is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * OpenFISMA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with OpenFISMA.  If not, see
 * {@link http://www.gnu.org/licenses/}.
 */

/**
 * Vulnerability
 *
 * @author Christian Smith <christian.smith@endeavorsystems.com>
 * @copyright (c) Endeavor Systems, Inc. 2011 {@link http://www.endeavorsystems.com}
 * @license http://www.openfisma.org/content/license GPLv3
 * @package Model
 * @uses BaseVulnerability
 */

class Vulnerability extends BaseVulnerability implements Fisma_Zend_Acl_OrganizationDependency
{
    /**
     * Override BaseVulnerability::setUp to include custom mutators
     *
     * @return void
     */
    public function setUp()
    {
        parent::setUp();
        $this->hasAccessor('Organization', 'getOrganization');
        $this->hasMutator('cvssBaseScore', 'setCvssBaseScore');
        $this->hasMutator('threatLevel', 'setThreatLevel');
    }

    public function setCvssBaseScore($value)
    {
        switch (true) {
            case ($value >=8.5):
                $this->_set('threatLevel', 'CRITICAL');
                break;
            case ($value >=6.5):
                $this->_set('threatLevel', 'HIGH');
                break;
            case ($value >=3.5):
                $this->_set('threatLevel', 'MODERATE');
                break;
            case ($value >=0):
                $this->_set('threatLevel', 'LOW');
                break;
            default:
                return;
        }
        $this->_set('cvssBaseScore', $value);
    }

    public function setThreatLevel($value)
    {
        if (isset($this->cvssBaseScore)) {
            return;
        }
        $this->_set('threatLevel', $value);
    }

    public function getOrganization()
    {
        return $this->Asset->Organization;
    }

    public function construct()
    {
        $state = $this->state();
        if ($state == Doctrine_Record::STATE_TCLEAN || $state == Doctrine_Record::STATE_TDIRTY) {
            try {
                $workflow = Doctrine::getTable('Workflow')->findDefaultByModule('vulnerability');
                if ($workflow) {
                    $this->CurrentStep = $workflow->getFirstStep();
                    switch ($this->CurrentStep->allottedTime) {
                        case 'days':
                            $this->nextDueDate = Zend_Date::now()
                                ->addDay($this->CurrentStep->allottedDays)
                                ->toString(Fisma_Date::FORMAT_DATE);
                            break;
                        case 'custom':
                        case 'unlimited':
                        case 'ecd':
                        default:
                            $this->nextDueDate = null;
                    }
                }
            } catch (Exception $e) {
            }
        }
    }

    /**
     * Implement the required method for Fisma_Zend_Acl_OrganizationDependency
     *
     * @return int
     */
    public function getOrganizationDependencyId()
    {
        return $this->Asset->orgSystemId;
    }

    /**
     * A pre-save hook to send notifications
     *
     * @param Doctrine_Event event The triggered doctrine event
     * @return void
     */
    public function preSave($event)
    {
        $modifyValues = $this->getModified(true);
        if (!empty($modifyValues)) {
            foreach ($modifyValues as $key => $value) {
                $newValue = $this->$key;
                if ($key === 'isResolved' && $newValue === true) {
                    Notification::notify(
                        'VULNERABILITY_CLOSED',
                        $this,
                        CurrentUser::getInstance()
                    );
                }
            }
        }
    }

    public function canEdit($field)
    {
        if ($this->CurrentStep && !empty($this->CurrentStep->restrictedFields)) {
            if (in_array($field, $this->CurrentStep->restrictedFields)) {
                return false;
            }
        }
        return true;
    }

    public function preUpdate($event)
    {
        if ($step = $this->CurrentStep) {
            $modified = $this->getModified(true);
            foreach ($modified as $key => $value) {
                if (!$this->canEdit($key)) {
                    throw new Fisma_Zend_Exception_User($key . ' cannot be editted in the current workflow step.');
                }
            }
        }
    }
}
