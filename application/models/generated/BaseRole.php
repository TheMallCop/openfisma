<?php

/**
 * BaseRole
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property timestamp $createdTs
 * @property timestamp $modifiedTs
 * @property string $name
 * @property string $nickname
 * @property string $description
 * @property Doctrine_Collection $Users
 * @property Doctrine_Collection $Privileges
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5441 2009-01-30 22:58:43Z jwage $
 */
abstract class BaseRole extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('role');
        $this->hasColumn('createdTs', 'timestamp', null, array('type' => 'timestamp'));
        $this->hasColumn('modifiedTs', 'timestamp', null, array('type' => 'timestamp'));
        $this->hasColumn('name', 'string', null, array('type' => 'string', 'extra' => array('purify' => 'plaintext')));
        $this->hasColumn('nickname', 'string', 255, array('type' => 'string', 'extra' => array('purify' => 'plaintext'), 'unique' => 'true;', 'length' => '255'));
        $this->hasColumn('description', 'string', null, array('type' => 'string', 'extra' => array('purify' => 'html')));
    }

    public function setUp()
    {
        $this->hasMany('User as Users', array('refClass' => 'UserRole',
                                              'local' => 'roleId',
                                              'foreign' => 'userId'));

        $this->hasMany('Privilege as Privileges', array('refClass' => 'RolePrivilege',
                                                        'local' => 'roleId',
                                                        'foreign' => 'privilegeId'));

        $timestampable0 = new Doctrine_Template_Timestampable(array('created' => array('name' => 'createdTs', 'type' => 'timestamp'), 'updated' => array('name' => 'modifiedTs', 'type' => 'timestamp')));
        $this->actAs($timestampable0);

    $this->addListener(new XssListener(), 'XssListener');
    $this->addListener(new BaseListener(), 'BaseListener');
    }
}