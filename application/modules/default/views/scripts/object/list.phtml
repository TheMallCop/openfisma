<?php echo $this->escape($this->searchBox($this->toolbarButtons, $this->searchForm), 'none'); ?>

<div id="moreSearchOptions" class="searchBox searchBoxAdditional" style="display: none;">
    <p>More Options:</p>
    <div class="centerButtons">
        <?php
            echo $this->escape($this->searchMoreOptionsForm, 'none');
        ?>
    </div>
</div>

<div id="searchColumns" class="searchBox searchBoxAdditional" style="display: none;">
    <p>Toggle Column Visibility:</p>
    <div id="searchColumnsButtons" class="centerButtons"></div>
</div>

<div id="advancedSearch" class="searchBox searchBoxAdditional"  style="display: none;">
    <p>Advanced Search:</p>
    <div id="advancedSearchCriteria"></div>
</div>

<?php Fisma_Format_Section::startSection(
    $this->translate($this->pluralModelName) . " <span id='searchResultsTotalFound'></span>"
); ?>
<div class='facetBox'>
    <h1>Reports</h1>
    Save as
    <select id='reportSelector' style='width:160px;'>
        <option value='blank'>&nbsp;</option>
        <option value='new'>New report...</option>
    <?php foreach($this->filters as $filter): ?>
        <option value='<?php echo $this->escape($filter->id); ?>'><?php echo $this->escape($filter->name); ?></option>
    <?php endforeach; ?>
    </select>
    <script type='text/javascript'>
        $(function() {
            var select  = $('select#reportSelector'),
                html    = select.html();
            select.button().html(html).change(Fisma.Search.saveQuery);
        });
    </script>
    <ul id='reportList'>
    <?php foreach($this->filters as $filter): ?>
        <li>
            <a href='<?php echo $this->escape($filter->url); ?>'><?php echo $this->escape($filter->name); ?></a>
            <img src='/images/trash_recyclebin_empty_closed.png' onclick='Fisma.Search.deleteQuery(this);' value='<?php
                echo $this->escape($filter->id);
            ?>' />
        </li>
    <?php endforeach; ?>
    </ul>
<?php if (isset($this->facet)): ?>
    <h1>Filters</h1>
    <?php foreach ($this->facet as $field): ?>
    <h2><?php echo $this->escape($field['label']); ?></h2>
    <ul>
        <?php if (!$this->$field['column']): ?>
        <li><a
            id='filter_<?php echo $this->escape($field['column']); ?>_all'
            class='selected'
            href='#'
            onclick='return Fisma.Search.facetSearch(this);'
            >(no filtering)
            </a>
        </li>
        <?php $this->$field['column'] = true; endif; ?>
        <?php foreach ($field['filters'] as $filter): ?>
        <li><a
            id='filter_<?php
                echo $this->escape($field['column']); ?>_<?php
                echo $this->escape($filter['operator']);
                foreach ($filter['operands'] as $operand):
                    echo $this->escape('_' . $operand);
                endforeach;
            ?>'
            href='#'
            onclick='return Fisma.Search.facetSearch(this);'
            ><?php echo $this->escape($filter['label']); ?>
            </a>
        </li>
        <?php endforeach; ?>
    </ul>
    <?php endforeach; ?>
<?php endif; ?>

<?php  
if ( isset($this->multifacet_page) ) {
    
    echo $this->partial($this->multifacet_page, 
        array(
            'model' => $this->multifacet_model,
            'workflow_steps' => $this->workflow_steps,
            'severity_list' => $this->severity_list,
            'networks' => $this->networks,
            'source_list' => $this->source_list,
            'days_old' => $this->days_old
        ) );
}
?>
</div>

<div class='listDatatableContainer' id="<?php echo $this->escape($this->containerId, 'javascript'); ?>"></div>
<?php Fisma_Format_Section::stopSection(); ?>

<script type="text/javascript">
(function() {
    var Dom = YAHOO.util.Dom,
        Lang = YAHOO.lang;

        Fisma.Search.searchPreferences = <?php echo $this->escape($this->searchPreferences, 'json'); ?>;

    YAHOO.util.Event.onContentReady (
        "advancedSearch",
        function () {
            Fisma.Storage.onReady(function() {
                var advancedSearchOptions = <?php echo $this->escape($this->advancedSearchOptions, 'none'); ?>;

                var searchPanel = new Fisma.Search.Panel(advancedSearchOptions);
                Fisma.Search.advancedSearchPanel = searchPanel;

                searchPanel.render(document.getElementById('advancedSearchCriteria')); 
                
                 // do not show the advanced button
                YAHOO.util.Event.onContentReady("hideSearch", function() {
                    var Dom = YAHOO.util.Dom;
                    if ( Dom.get('hideSearch').value === 'true' && Dom.get('advanced').style.display !== 'none' )
                    {
                        var panel_container = Fisma.Search.advancedSearchPanel.container;
                        Dom.get('advanced').style.display = 'none';
                        YAHOO.util.Event.onContentReady("advancedSearch", function() { Dom.get('advancedSearch').style.display = 'none'; });
                        
                        while ( $(panel_container).children().length > 0 )
                        {
                            Fisma.Search.advancedSearchPanel.removeCriteria($(panel_container).children().last()[0]);
                        }
                       
                       Fisma.Search.updateSearchPreferences = true;
                    }
                });
                
            });
        }
    );
    
   
    
    // When the data table container is loaded
    YAHOO.util.Event.onContentReady("<?php echo $this->escape($this->containerId, 'javascript'); ?>", function() {
        var Dom = YAHOO.util.Dom,
            YL = YAHOO.lang,
            QueryState = Fisma.Search.QueryState,
            modelName = Dom.get('modelName').value,
            tablePrefs = new Fisma.Search.TablePreferences(modelName),
            columnDefs = <?php echo $this->escape($this->columnDefinitions, 'json'); ?>;

        Fisma.Storage.onReady(function() {
            var queryState = new QueryState(modelName);

            var urlParamString = document.location.search.substring(1); // strip the leading "?" character
            var urlParams = urlParamString.split('&');
            var i;

            for (i in urlParams) {
                var urlParam = urlParams[i];
                var keyValuePair = urlParam.split("=");
                var criteriaString = keyValuePair[1];

                // parse parameters
                if ("k" === keyValuePair[0]) {
                    if (queryState.getSearchType() === QueryState.TYPE_ADVANCED) {
                        queryState.setSearchType(QueryState.TYPE_SIMPLE);
                    }
                    queryState.setKeywords(decodeURIComponent(keyValuePair[1]));
                } else if ("f" === keyValuePair[0]) {
                    queryState.setSearchType(QueryState.TYPE_FACETED);
                    queryState.setFilters(decodeURIComponent(keyValuePair[1]));
                }
            }

            // Load saved keyword search
            if (queryState.getSearchType() === QueryState.TYPE_SIMPLE) {
                Dom.get("keywords").value = queryState.getKeywords();
            } else if (queryState.getSearchType() === QueryState.TYPE_FACETED) {
                Dom.get("keywords").value = queryState.getKeywords();
                var obj, j, filters = queryState.getFilters().split("/");
                for (j in filters) {
                    obj = document.getElementById(filters[j]);
                    YAHOO.util.Event.onContentReady('advancedSearchCriteria', obj.onclick, obj, true);
                }
            }

            /*
             * Column definitions are defined in JSON, which cannot embed object references such as formatters.
             * Also, the "hidden" property needs to be updated with respect to what's in storage.
             */
            for (index in columnDefs) {
                var columnDef = columnDefs[index];

                columnDef.hidden = !tablePrefs.getColumnVisibility(columnDef.key, !columnDef.hidden);

                if (columnDef['formatter']) {
                    columnDef['formatter'] = Fisma.Util.getObjectFromName(columnDef['formatter']);
                }
            }

            // A function which constructs POST requests for this data table
            var requestConstructor;

            <?php if (isset($this->requestConstructor)): ?>
                var requestConstructorName = "<?php echo $this->escape($this->requestConstructor); ?>";
                requestConstructor = Fisma.Util.getObjectFromName(requestConstructorName);
            <?php else: ?>
                requestConstructor = function (tableState, self) {
                    // Build custom request
                    var request = "/sort/" + tableState.sortedBy.key +
                                  "/dir/" + (tableState.sortedBy.dir == 'yui-dt-asc' ? 'asc' : 'desc') +
                                  "/start/" + tableState.pagination.recordOffset +
                                  "/count/" + tableState.pagination.rowsPerPage;

                    return request;
                };
            <?php endif; ?>

            // DataSource instance
            var dataSource = new YAHOO.util.XHRDataSource('<?php echo $this->escape($this->dataUrl); ?>');
            dataSource.connMethodPost = false;
            dataSource.maxCacheEntries = 5;
            dataSource.responseType = YAHOO.util.DataSource.TYPE_JSON;
            dataSource.responseSchema = {
                resultsList : "<?php echo $this->escape($this->resultVariable, 'javascript'); ?>",
                metaFields : {
                    totalRecords : "totalRecords"
                }
            };

            // DataTable configuration
            var initialPage = tablePrefs.getPage(),
                sortedBy = tablePrefs.getSort(),
                sortedByKey = "<?php echo $this->escape($this->initialSortColumn, 'javascript'); ?>",
                sortedByDir = "<?php echo $this->escape($this->sortDirection, 'javascript'); ?>";
            if (YL.isObject(sortedBy)) {
                sortedByKey = YL.isValue(sortedBy.column) ? sortedBy.column : sortedByKey;
                sortedByDir = YL.isValue(sortedBy.dir) ? sortedBy.dir : sortedByDir;
            }
            var tableConfiguration = {
                initialLoad : false,
                dynamicData : true,
                sortedBy : { key : sortedByKey, dir : sortedByDir },
                paginator: new YAHOO.widget.Paginator(
                    {
                        totalRecords: YAHOO.widget.Paginator.VALUE_UNLIMITED,
                        initialPage: YL.isNumber(initialPage) ? initialPage : 1,
                        rowsPerPage : <?php echo $this->escape($this->rowCount, 'javascript'); ?>,
                        template : "{FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} "
                                   + "{RowsPerPageInputBox}"
                    }
                ),
                generateRequest : requestConstructor,
                draggableColumns : true
            };

            // The actual DataTable instance
            var dataTable = new YAHOO.widget.DataTable(
                "<?php echo $this->escape($this->containerId, 'javascript'); ?>",
                columnDefs,
                dataSource,
                tableConfiguration
            );

            // Register data table with Fisma.Search -- this allows it to be found after this scope disappears
            Fisma.Search.setTable(dataTable);

            // Update number of returned records
            dataTable.handleDataReturnPayload = function(request, response, payload) {
                payload.totalRecords = response.meta.totalRecords;

                // Display total records in the search results header
                var searchResultsHeader = document.getElementById('searchResultsTotalFound');
                if (searchResultsHeader) {
                    var totalRecords = response.meta.totalRecords ? response.meta.totalRecords : 0;
                    var searchResultsTotalFound = document.createTextNode('(' + totalRecords + ' records found)');

                    if (searchResultsHeader.firstChild) {
                        searchResultsHeader.removeChild(searchResultsHeader.firstChild);
                    }

                    searchResultsHeader.appendChild(searchResultsTotalFound);
                }

                return payload;
            }

            // Enable row highlighting for mouse over events
            dataTable.subscribe("rowMouseoverEvent", dataTable.onEventHighlightRow);
            dataTable.subscribe("rowMouseoutEvent", dataTable.onEventUnhighlightRow);

            // Enable cell click event handler
            dataTable.subscribe("cellClickEvent", function (clickEvent) {
                var targetEl = clickEvent.target;
                var rowData = this.getRecord(targetEl);

                // Reject clicks in columns that contain checkboxes (that would be cruel for the user)
                var column = this.getColumn(targetEl);
                if (column.formatter == Fisma.TableFormat.formatCheckbox) {
                    return;
                }

                // Reject clicks for deleted records
                if (rowData.getData('deleted_at')) {
                    var message = 'This record cannot be viewed because it was deleted.';
                    Fisma.Util.showAlertDialog(message);
                    return;
                }

                var storage = new Fisma.Storage('Fisma.PreviousNext');
                var records = this.getRecordSet().getRecords();
                var i;
                var ids = [];
                for (i in records) {
                    if(!records[i].getData('deleted_at')) {
                        ids.push(records[i].getData('id'));
                    }
                }

                storage.set(modelName + 'ids', ids);

                var url = "<?php echo $this->escape($this->clickEventBaseUrl, 'javascript');?>"
                        + escape(rowData._oData['<?php echo $this->escape($this->clickEventVariableName); ?>']);

                url += '/fromSearch/1';
                if (ids[0] == rowData._oData['id']) {
                    url += '/first/1';
                }

                if (ids[ids.length - 1] == rowData._oData['id']) {
                    url += '/last/1';
                }

               // A shift+click pops up a new window for the record view
                if (clickEvent.event.shiftKey) {
                    var popup = window.open(url);

                    // A shift+alt+click will pop under a new window for the record view
                    if (clickEvent.event.altKey) {
                        popup.blur();
                        window.focus();
                    }
                } else {
                    document.location = url;
                }
            });

            <?php if (isset($this->renderEventFunction)): ?>
                var renderEventFunctionName = "<?php echo $this->escape($this->renderEventFunction); ?>";
                var renderEventFunction = Fisma.Util.getObjectFromName(renderEventFunctionName);

                dataTable.subscribe("renderEvent", function () {
                    renderEventFunction(dataTable);
                });
            <?php endif; ?>

            // Set up thead click events for columns which contain checkboxes
            dataTable.subscribe("theadCellClickEvent", function (clickEvent) {
                var column = this.getColumn(clickEvent.target);

                if (column.formatter == Fisma.TableFormat.formatCheckbox) {
                    var theadCheckbox = YAHOO.util.Dom.get('dt-checkbox');

                    // Load records for the current page
                    var paginator = dataTable.getState().pagination.paginator;
                    var startRecord = (paginator.getCurrentPage() - 1) * paginator.getRowsPerPage();
                    var records = this.getRecordSet().getRecords(startRecord);

                    for (var i = 0; i < records.length; i++) {
                        if (records[i].getData('deleted_at')) {
                            continue;
                        }

                        if (theadCheckbox.checked) {
                            this.selectRow(records[i]);
                        } else {
                            this.unselectRow(records[i]);
                        }

                        this.getRecordSet().updateRecordValue(records[i], column.key, theadCheckbox.checked);
                    }

                    this.render();
                }
            });

            // Highlight/unhighlight rows in response to checkbox clicks
            dataTable.subscribe("checkboxClickEvent", function (clickEvent) {
                var target = clickEvent.target;
                var checked = target.checked;
                var record = this.getRecord(target);

                this.getRecordSet().updateRecordValue(record, 'checked', checked);

                if (checked) {
                    this.selectRow(record);
                } else {
                    this.unselectRow(record);
                }
            });

            dataTable.get("paginator").subscribe("pageChange", function (event, prefs) {
                // Make sure that the header checkbox is unchecked on page changes
                var checkbox = YAHOO.util.Dom.get('dt-checkbox');
                if (checkbox) {
                    checkbox.checked = false;
                }

                // save the new page number
                prefs.setPage(event.newValue);
            }, tablePrefs);

            dataTable.subscribe("columnSortEvent", function(event, prefs) {
                prefs.setSort(event.column.key, event.dir);
            }, tablePrefs);

            dataTable.subscribe("columnResizeEvent", function(event, prefs) {
                prefs.persist();
            }, tablePrefs);

            dataTable.subscribe("columnReorderEvent", function(event, prefs) {
                prefs.persist();
            }, tablePrefs);

            Fisma.Search.initializeSearchColumnsPanel(Dom.get("searchColumnsButtons"));
        });
    });
})();
</script>
