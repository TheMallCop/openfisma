<?php

echo $this->escape($this->searchBox($this->toolbarButtons, $this->searchForm), 'none');

Fisma_Format_Section::startSection("Organizations: Hierarchy View"); 

?>
<div id='showDisposalSystem'>
    <input type='checkbox' id='disposalSystem'>
    <label for="disposalSystem">Display Disposed Systems</label>
</div>

<div id="orgTree">Loading...</div>

<script type="text/javascript">
YAHOO.util.Event.onDOMReady(
    function () {
        buildTree();
        buildContextMenu();
    }
);

YAHOO.util.Event.addListener("disposalSystem", "click", buildTree);

/**
 * Display an organization tree
 */
function buildTree() {
    var url = '/organization/tree-data/format/json';

    // Include disposal systems if user check checkbox
    if (YAHOO.util.Dom.get('disposalSystem').checked === true) {
        url += '/displayDisposalSystem/true';
    }

    YAHOO.util.Connect.asyncRequest(
        'GET', 
        url, 
        {
            success: function(o) {
                var json = YAHOO.lang.JSON.parse(o.responseText);
                showTree(json.treeData);
            },
            failure: function(o) {
                alert('Unable to load the organization tree: ' + o.statusText);
            }
        }, 
        null);
}

// Global reference to the tree view
var tree;

function showTree(treeNodes) {
    tree = new YAHOO.widget.TreeView("orgTree");

    renderTreeNodes(treeNodes, tree.getRoot(), 0);
    
    tree.draw();
}

/**
 * Display context menu
 */
function buildContextMenu() {
    var treeEl = document.getElementById("orgTree");

    var contextMenuItems = ["View"];
    var oTreeContextMenu = new YAHOO.widget.ContextMenu(
        "treeContextMenu",
        { 
            trigger: treeEl,
            itemdata: contextMenuItems,
            lazyload: true
        }
    );
    oTreeContextMenu.subscribe("click", contextMenuHandler);
}

function contextMenuHandler(event, eventArgs) {
    // Get a reference to the three node that was the target of this context menu event
    var node = tree.getNodeByElement(this.contextEventTarget);

    var type = node.data.type;

    // Set up the appropriate URL to forward the user to, based on the type of organization represented by this node
    var model = (type == 'agency' || type == 'bureau' || type == 'organization') 
              ? 'organization'
              : 'system';
    
    var idParameter = (type == 'agency' || type == 'bureau' || type == 'organization') 
                    ? 'id'
                    : 'oid';

    var url = '/' + model + '/view/' + idParameter + '/' + node.data.organizationId;
    window.location = url;
}

var dragDropGroup = 'organizationTreeDndGroup';

// These constants are used to track whether a node is being dragged above, onto, or below another node
var DRAG_ABOVE = 0;
var DRAG_ONTO = 1;
var DRAG_BELOW = 2;
var currentDragDestination;

function renderTreeNodes(treeNodes, parentNode, depth) {
    for (var i in treeNodes) {
        // Create tree node
        treeNode = treeNodes[i];
        nodeText = "<b>" + PHP_JS().htmlspecialchars(treeNode.label) + "</b> - <i>"
                         + PHP_JS().htmlspecialchars(treeNode.orgTypeLabel) + "</i>";
        var yuiNode = new YAHOO.widget.TextNode(
            {
                label: nodeText,
                organizationId: treeNode.id,
                type: treeNode.orgType,
                systemId: treeNode.systemId
            }, 
            parentNode, false
        );

        // Set the background color of disposal system as pink 
        var sdlcPhase = (treeNode.System) ? treeNode.System.sdlcPhase : false;
        if (sdlcPhase === 'disposal') {
            yuiNode.labelStyle = treeNode.orgType + ' disposal';
        } else {
            yuiNode.labelStyle = treeNode.orgType;
        }

        // Automatically expand the first 2 levels
        if (depth < 2) {
            yuiNode.expand();
        }
        
        // Recurse
        if (treeNode.children.length > 0) {
            renderTreeNodes(treeNode.children, yuiNode, depth + 1);
        }
    }
    
    makeTreeDraggable(tree);
}

function makeTreeDraggable(tree) {
    // Get a list of all nodes in the tree
    var nodes = tree.getNodesBy(function () {return true;});
    
    for (var nodeIndex in nodes) {
        var node = nodes[nodeIndex];

        var yuiNodeDrag = new DDTree(node.contentElId, dragDropGroup, null);
    }
}

// DDTree is a custom object which subclasses DDProxy
DDTree = function(id, sGroup, config) {
    DDTree.superclass.constructor.call(this, id, sGroup, config);

    // Make the proxy object slightly transparent
    var el = this.getDragEl();
    YAHOO.util.Dom.setStyle(el, "opacity", 0.85);
}

YAHOO.lang.extend(DDTree, YAHOO.util.DDProxy, {
    currentDragEl: null,
    
    currentDragSuccessful: false,
    
    startDrag: function (event, id) {
        // Make the dragged proxy look like the source elemnt
        var dragEl = this.getDragEl();
        var clickEl = this.getEl();

        dragEl.innerHTML = clickEl.innerHTML;
        YAHOO.util.Dom.setStyle(dragEl, "background", "white");
        YAHOO.util.Dom.setStyle(dragEl, "border", "none");
    },
    
    endDrag: function (event, id) {
        var srcEl = this.getEl();
        var proxy = this.getDragEl();
        
        // Remove any visual highlighting
        this.currentDragEl.style.border = "";
        this.currentDragEl.style.backgroundColor = "";

        if (!this.currentDragSuccessful) {
            // Animate the proxy element returning to its origin
            YAHOO.util.Dom.setStyle(proxy, "visibility", "");
            var anim = new YAHOO.util.Motion(
                proxy, 
                { points: { to: YAHOO.util.Dom.getXY(srcEl) } },
                0.2,
                YAHOO.util.Easing.easeOut
            );
        
            // Hide the proxy element when the animation finishes
            anim.onComplete.subscribe(function () {
                YAHOO.util.Dom.setStyle(proxy.id, "visibility", "hidden");
            });
            anim.animate();
            this.currentDragSuccessful = false;
        }
    },
    
    onDragOver: function (event, id) {
        var dragLocation = getDragLocation(id, event);
        
        // If the drag is near the top of the element, then we set the top border. If its near the middle, we highlight
        // the entire element. If its near the bottom, we set the bottom border.
        this.currentDragEl = YAHOO.util.Dom.get(id);   
        if (dragLocation == DRAG_ABOVE) {
            this.currentDragEl.style.backgroundColor = "";
            this.currentDragEl.style.borderTop = "4px solid orange";
            this.currentDragEl.style.borderTop = "4px solid orange";
        } else if (dragLocation == DRAG_ONTO) {
            this.currentDragEl.style.border = "";
            this.currentDragEl.style.backgroundColor = "orange";
        } else {
            this.currentDragEl.style.backgroundColor = "";
            this.currentDragEl.style.borderBottom = "4px solid orange";
        }
    },
    
    onDragOut: function (event, id) {
        // The drag out event removes provides visual feedback.
        var dragDropDestination = YAHOO.util.Dom.get(id);            
        dragDropDestination.style.backgroundColor = "";
        dragDropDestination.style.border = "";
    },
    
    // The drag drop event sends an asynchronous event to the server to update the persistent
    // storage of the tree. 
    onDragDrop: function(event, id) {

        var srcNode = tree.getNodeByElement(this.getEl());
        var destNode = tree.getNodeByElement(document.getElementById(id));
        var dragLocation = getDragLocation(id, event);

        // Set up the query string for this operation
        var query = '/organization/move-node/src/' 
                  + srcNode.data.organizationId 
                  + '/dest/' 
                  + destNode.data.organizationId 
                  + '/dragLocation/' 
                  + dragLocation;

        // Show a modal panel while waiting for the operation to complete. This is a bit ugly for usability,
        // but it prevents the user from modifying the tree while an update is already pending.
        savePanel = new YAHOO.widget.Panel(
            "savePanel",
            {
                width: "250px",
                fixedcenter: true,
                close: false,
                draggable: false,
                modal: true,
                visible: true
            }
        );
        savePanel.setHeader('Saving...');
        savePanel.setBody('<img src="/images/loading_bar.gif">')
        savePanel.render(document.body);

        YAHOO.util.Connect.asyncRequest(
            'GET', 
            query, 
            {
                success: function (event) {
                    var result = YAHOO.lang.JSON.parse(event.responseText);
                    if (!result.success) {
                        alert("Not able to move the item: " + result.message);
                    } else {
                        tree.popNode(srcNode);

                        switch (dragLocation) {
                            case DRAG_ABOVE:
                                srcNode.insertBefore(destNode);
                                break;
                            case DRAG_ONTO:
                                srcNode.appendTo(destNode);
                                break;
                            case DRAG_BELOW:
                                srcNode.insertAfter(destNode);
                                break;
                        }

                        tree.getRoot().refresh();
                        
                        // YUI discards all the event handlers after refreshing a treeview, so we need to make it
                        // draggable all over again.
                        makeTreeDraggable(tree);
                    }
                    
                    savePanel.hide();
                },
                failure: function (event) {
                    alert('Unable to reach the server to save your changes: ' 
                          + event.statusText);
                    savePanel.hide();
                }
            }, 
            null
        );

        // @todo remove
        this.currentDragSuccessful = true; 
    }
});

// Given an element and a drag location, return a constant which indicates whether the drag
// operation is currently above, on top of, or below the targeted tree node.
function getDragLocation(targetElement, event) {
    var targetRegion = YAHOO.util.Dom.getRegion(targetElement);
    var height = targetRegion.bottom - targetRegion.top;
    var clickVerticalOffset = YAHOO.util.Event.getPageY(event) - targetRegion.top;
    
    // This ratio indicates how far down the click was inside the element. This is used for deciding whether the
    // mouse is near the top, near the bottom, or somewhere in the middle.
    var verticalRatio = clickVerticalOffset / height;
    if (verticalRatio < 0.25) {
        return DRAG_ABOVE;
    } else if (verticalRatio < 0.75) {
        return DRAG_ONTO;
    } else {
        return DRAG_BELOW;
    }
}

// Expand all tree nodes
function expandAll() {
    tree.getRoot().expandAll();
}

// Collapse all tree nodes
function collapseAll() {
    tree.getRoot().collapseAll();
}

</script>

<?php Fisma_Format_Section::stopSection(); ?>
