<input name="csrf" type="hidden" value="<?php echo $this->escape($this->csrfToken); ?>">
<div id="summaryContainer"></div>

<script type="text/javascript">

YAHOO.util.Event.onDOMReady(function () {
    var url = '/finding/summary/data/format/json';

    var closedSteps = <?php echo $this->escape($this->closedSteps, 'json'); ?>;
    var workflowSteps = <?php echo $this->escape($this->steps, 'json'); ?>;


    var HARDCODED_COLUMN_COUNT = 4; // includes all columns that don't vary, i.e. everything but approvals
    var columnCount = HARDCODED_COLUMN_COUNT + workflowSteps.length;

    var storage = new Fisma.PersistentStorage("Finding.Summary");

    Fisma.Storage.onReady(function () {
        var summaryTable = new Fisma.FindingSummary(url, columnCount, workflowSteps, closedSteps);
        Fisma.FindingSummary.SUMMARY_TYPES.pointOfContact = <?php
            echo $this->escape($this->translate('Finding_Point_of_Contact'), 'json');
        ?>;

        summaryTable.setTooltip("viewBy", "<?php echo $this->escape($this->tooltips['viewBy'], "none"); ?>");

        // Add filters
        var defaultFindingSource = storage.get("findingSource");
        summaryTable.addFilter(
            "findingSource",
            "Finding Source",
            <?php echo $this->escape($this->findingSources, 'json'); ?>,
            defaultFindingSource || "none",
            function (filter, value) {
                storage.set(filter, value);
                storage.sync();
            }
        );

        var hideStepsOutsideWorkflow = function(workflowId) {
            for (var i in workflowSteps) {
                if (workflowSteps[i].workflowId !== workflowId) {
                    $('[header]').filter(function() {
                        return ($(this).attr('header') === i);
                    }).hide();
                }
            }
        };

        var defaultMitigationStrategy = storage.get("mitigationType");
        if (defaultMitigationStrategy && defaultMitigationStrategy !== 'none') {
            summaryTable.onReload = function() {
                hideStepsOutsideWorkflow(defaultMitigationStrategy);
            };
        }
        summaryTable.addFilter(
            "mitigationType",
            "Workflow",
            <?php echo $this->escape($this->mitigationTypes, 'json'); ?>,
            defaultMitigationStrategy || "none",
            function (filter, value) {
                storage.set(filter, value);
                storage.sync();
                $('[header]').show();
                summaryTable.onReload = null;
                if (value !== 'none') {
                    summaryTable.onReload = function() {
                        hideStepsOutsideWorkflow(value);
                    };
                }
            }
        );

        // Use storage to set the initial view type and to record the user's current view type.
        var defaultViewType = storage.get("defaultViewType");
        if (defaultViewType) {
            summaryTable.setViewType(storage.get("defaultViewType"));
        }

        summaryTable.onViewTypeChange.subscribe(function (type, args) {
            storage.set("defaultViewType", args[0]);
            storage.sync();
        });

        summaryTable.render(document.getElementById('summaryContainer'));
    });
});

</script>
