<?php
/**
 * Copyright (c) 2010 Endeavor Systems, Inc.
 *
 * This file is part of OpenFISMA.
 *
 * OpenFISMA is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * OpenFISMA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with OpenFISMA.  If not, see
 * {@link http://www.gnu.org/licenses/}.
 */

/**
 * Controller for Vulnerabilities
 *
 * @author     Andrew Reeves <andrew.reeves@endeavorsystems.com>
 * @copyright  (c) Endeavor Systems, Inc. 2010 {@link http://www.endeavorsystems.com}
 * @license    http://www.openfisma.org/content/license GPLv3
 * @package    Controller
 */
class Vm_VulnerabilityController extends Fisma_Zend_Controller_Action_Object
{
    /**
     * The main name of the model.
     *
     * This model is the main subject which the controller operates on.
     *
     * @var string
     */
    protected $_modelName = 'Vulnerability';

    /**
     * Invokes a contract with Fisma_Zend_Controller_Action_Object regarding privileges
     *
     * @var string
     * @link http://jira.openfisma.org/browse/OFJ-24
     */
    protected $_organizations = '*';

    /**
     * Set up context switches
     */
    public function init()
    {
        $this->_helper->ajaxContext()
            ->addActionContext('workflow', 'html')
            ->addActionContext('artifacts', 'html')
            ->addActionContext('complete-step', 'json')
            ->addActionContext('attach-artifact', 'json')
            ->initContext();

        parent::init();
    }

    /**
     * Import scan results via a plug-in
     *
     * @GETAllowed
     * @return void
     */
    public function pluginAction()
    {
        $this->_acl->requirePrivilegeForClass('create', 'Vulnerability');
        $this->view->toolbarButtons = array(new Fisma_Yui_Form_Button(
            'upload',
            array(
                'label' => 'Submit',
                'imageSrc' => '/images/ok.png',
                'onClickFunction' => 'Fisma.Util.submitFirstForm',

            )
        ));

        // Load the vulnerability plugin form
        $uploadForm = Fisma_Zend_Form_Manager::loadForm('vulnerability_upload');
        $uploadForm = Fisma_Zend_Form_Manager::prepareForm($uploadForm);
        $uploadForm->setAttrib('id', 'injectionForm');

        // Populate the drop menu options
        $networks = Doctrine::getTable('Network')->findAll()->toArray();
        $networkList = array();
        foreach ($networks as $network) {
            $networkList[$network['id']] = $network['nickname'] . ' - ' . $network['name'];
        }
        asort($networkList, SORT_STRING);
        $uploadForm->networkId->addMultiOption('', '');
        $uploadForm->networkId->addMultiOptions($networkList);

        $systems = Doctrine_Query::create()
            ->from('Organization o')
            ->innerJoin('o.OrganizationType ot')
            ->where('ot.nickname = ?', 'system')
            ->execute();
        $selectArray = $this->view->systemSelect($systems);
        $uploadForm->orgSystemId->addMultiOption('', '');
        $uploadForm->orgSystemId->addMultiOptions($selectArray);

        // Configure the file select
        $uploadForm->setAttrib('enctype', 'multipart/form-data');

        // Setup the view
        $this->view->assign('uploadForm', $uploadForm);

        // Handle the file upload, if necessary
        $fileReceived = false;
        $values = $this->_request->getPost();
        $supportedFiletypes = array("application/xml", "text/plain", 'text/html');
        if ($values) {
            if ($uploadForm->isValid($values)) {// && $fileReceived = $uploadForm->selectFile->receive()) {
                if (count($_FILES['selectFile']['name']) == 1) { //single-upload
                    $file = array();
                    foreach ($_FILES['selectFile'] as $index => $value) {
                        $file[$index] = $value[0];
                    }

                    $values['filepath'] = $file['tmp_name'];
                    $values['filename'] = $file['name'];
                    $values['mimetype'] = $file['type'];

                    // Execute the plugin with the received file
                    try {
                        if (in_array($values['mimetype'], $supportedFiletypes)) {
                            $rc = Fisma_Vulnerability_FileUpload::
                                      processFile($values, CurrentUser::getInstance()->id, true);

                            if (isset($rc) && !empty($rc['msg'])) {
                                $this->view->priorityMessenger($rc['msg']);
                            }
                        } else if ($values['mimetype'] === "application/zip") {

                            $appRoot = realpath(APPLICATION_PATH . '/../');
                            $scriptDir = $appRoot ."/scripts/bin/";

                            $cmd = "php " . $scriptDir . "vm_scan_bulk_upload.php" .
                                   " -n " . $values['networkId'] .
                                   " -o " . $values['orgSystemId'] .
                                   " -f " . $values['filepath'] .
                                   " -u " . CurrentUser::getInstance()->id;

                            $result = exec($cmd ." &> /tmp/vm_bulkupload.txt &");

                            $this->view->priorityMessenger(
                                            'Your scan files are submitted for processing. ' .
                                            'You will receive an email notification when it is done.');
                        } else {
                            $this->view->priorityMessenger(
                                    "Unsupported file type: " . $values['mimetype'],
                                    'warning');
                        }
                    } catch (Exception $e) {
                        $this->view->priorityMessenger($e->getMessage(), 'warning');
                    }
                }

                if (count($_FILES['selectFile']['name']) > 1) { //Multi-upload
                    $errorMessages = "";
                    $bulkPath = Fisma::getPath('temp') . '/' . Fisma_Vulnerability_BulkUpload::BULK_DIR_PATH;
                    Fisma_FileSystem::recursiveDelete($bulkPath);
                    mkdir($bulkPath, 0777, true);
                    for ($i = 0; $i<count($_FILES['selectFile']['name']); $i++) {
                        // PHP handles multiple uploads as $_FILES['element_name']['attribute'][idx]
                        // instead of $_FILES['element_name'][idx]['attribute'], so we need to manually remap it
                        $file = array();
                        foreach ($_FILES['selectFile'] as $index => $value) {
                            $file[$index] = $value[$i];
                        }

                        if (!empty($file['name'])) {

                            if (Fisma_FileManager::getUploadFileError($file)) {
                                $errorMessages .= Fisma_FileManager::getUploadFileError($file);
                                continue;
                            } else {
                                //move all xml files to /tmp
                                if (in_array($file['type'], $supportedFiletypes)) {
                                    move_uploaded_file(
                                        $file['tmp_name'],
                                        $bulkPath . '/' . $file['name']
                                    );
                                } else {
                                    $errorMessages .= "Unsupported type ({$file['type']}) for {$file['name']}.<br/>";
                                }
                            }
                        }
                    }

                    $appRoot = realpath(APPLICATION_PATH . '/../');
                    $scriptDir = $appRoot ."/scripts/bin/";

                    $cmd = "php " . $scriptDir . "vm_scan_bulk_upload.php" .
                           " -n " . $values['networkId'] .
                           " -o " . $values['orgSystemId'] .
                           " -u " . CurrentUser::getInstance()->id;

                    $result = exec($cmd ." &> " . Fisma::getPath('temp') . "/vm_bulkupload.txt &");

                    $this->view->priorityMessenger(
                                    'Your scan files are submitted for processing. ' .
                                    'You will receive an email notification when it is done.');

                    // Throw non-fatal error(s) after uploading other files
                    if (!empty($errorMessages)) {
                        $this->view->priorityMessenger($errorMessages, 'warning');
                    }
                }
            } else { //other form elements' validation errors
                $errorString = Fisma_Zend_Form_Manager::getErrors($uploadForm);

                // Customize the error message
                if ($errorString && stristr($errorString, 'network')) {
                    $msgs[] = array('warning' => 'Network: Value is required and can\'t be empty');
                }

                $file = $_FILES['selectFile'];
                if (Fisma_FileManager::getUploadFileError($file)) {
                    $msgs[] = array('warning' => Fisma_FileManager::getUploadFileError($file));
                }

                if (!$msgs) {
                    $msgs[] = array('notice' => 'An unrecoverable error has occured.');
                }

                // Error message
                $this->view->priorityMessenger($msgs);
            }

            $this->render(); // Not sure why this view doesn't auto-render?? It doesn't render when the POST is set.
        }
    }

    /**
     * The preDispatch hook is used to split off poam modify actions, mitigation approval actions, and evidence
     * approval actions into separate controller actions.
     *
     * @return void
     */
    public function preDispatch()
    {
        parent::preDispatch();

        $module = Doctrine::getTable('Module')->findOneByName('Vulnerability Management');

        if (!$module->enabled) {
            throw new Fisma_Zend_Exception('This module is not enabled.');
        }

        $this->_organizations = $this->_me->getOrganizationsByPrivilege('vulnerability', 'read');

        $request = $this->getRequest();
    }

    /**
     * View details of a vulnerability object
     *
     * @GETAllowed
     * @return void
     */
    public function viewAction()
    {
        $id = $this->_request->getParam('id');

        $fromSearchParams = $this->_getFromSearchParams($this->_request);

        $this->view->id = $id;
        $this->_viewVulnerability();
        $vulnerability = $this->view->vulnerability;

        $this->view->toolbarButtons = $this->getToolbarButtons($vulnerability);
        $this->view->searchButtons = $this->getSearchButtons($vulnerability, $fromSearchParams);

        // Put a span around the comment count so that it can be updated from Javascript
        $commentCount = '<span id=\'vulnerabilityCommentsCount\'>' . $vulnerability->getComments()->count() . '</span>';

        $tabView = new Fisma_Yui_TabView('VulnerabilityView', $id);
        $tabView->addTab("Vulnerability $id", "/vm/vulnerability/vulnerability/id/$id");
        $tabView->addTab("Workflow", "/workflow/workflow/format/html/model/vulnerability/id/$id");
        $tabView->addTab('Upload History', "/vm/vulnerability/upload-history/id/$id");
        $tabView->addTab(
            $this->view->translate('Vulnerability_Attachments'), "/vm/vulnerability/artifacts/id/$id/format/html");
        $tabView->addTab("Comments ($commentCount)", "/vm/vulnerability/comments/id/$id");
        $tabView->addTab("Audit Log", "/vm/vulnerability/audit-log/id/$id");

        $this->view->tabView = $tabView;

    }

    /**
     * Override parent in order to disable manual creation of vulnerabilities
     *
     * @GETAllowed
     * @return void
     */
    public function createAction()
    {
        throw new Fisma_Zend_Exception('Manual creation of vulnerabilities is not permitted.');
    }

    /**
     * Override parent in order to disable manual editing of vulnerabilities
     *
     * @GETAllowed
     * @return void
     */
    public function editAction()
    {
        throw new Fisma_Zend_Exception('Manual editing of vulnerabilities is not permitted.');
    }

    /**
     * Display comments for this vulnerability
     *
     * @GETAllowed
     */
    public function commentsAction()
    {
        $id = $this->_request->getParam('id');
        $this->view->assign('id', $id);
        $vulnerability = Doctrine::getTable('Vulnerability')->find($id);

        $this->_viewVulnerability();
        $comments = $vulnerability->getComments()->fetch(Doctrine::HYDRATE_ARRAY);

        $commentRows = array();

        foreach ($comments as $comment) {
            $commentTs = new Zend_Date($comment['createdTs'], Fisma_Date::FORMAT_DATETIME);
            $commentTs->setTimezone('UTC');
            $commentDateTime = $commentTs->toString(Fisma_Date::FORMAT_MONTH_DAY_YEAR)
                                  . ' at '
                                  . $commentTs->toString(Fisma_Date::FORMAT_AM_PM_TIME);
            $commentTs->setTimezone(CurrentUser::getAttribute('timezone'));
            $commentDateTimeLocal = $commentTs->toString(Fisma_Date::FORMAT_MONTH_DAY_YEAR)
                                  . ' at '
                                  . $commentTs->toString(Fisma_Date::FORMAT_AM_PM_TIME);
            $commentRows[] = array(
                'timestamp' => Zend_Json::encode(array("local" => $commentDateTimeLocal, "utc" => $commentDateTime)),
                'unixtimestamp' => $commentTs->getTimestamp(),
                'username' => $this->view->userInfo($comment['User']['displayName'], $comment['User']['id']),
                'Comment' =>  $this->view->textToHtml($this->view->escape($comment['comment'])),
                'delete' => (($comment['User']['id'] === CurrentUser::getAttribute('id'))
                    ? '/comment/remove/format/json/id/' . $id . '/type/Vulnerability/commentId/' . $comment['id']
                    : ''
                )
            );
        }

        $dataTable = new Fisma_Yui_DataTable_Local();

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Timestamp',
                true,
                'Fisma.TableFormat.formatDateTimeLocal',
                null,
                'timestamp',
                false,
                'string',
                'unixtimestamp'

            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'unixtimestamp',
                false,
                null,
                null,
                'unixtimestamp',
                true
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'User',
                true,
                'Fisma.TableFormat.formatHtml',
                null,
                'username'
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Comment',
                false,
                'Fisma.TableFormat.formatHtml',
                null,
                'comment'
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Action',
                false,
                'Fisma.TableFormat.deleteControl',
                null,
                'delete'
            )
        );

        $dataTable->setData($commentRows);

        $this->view->dataTable = $dataTable;

        $commentButton = new Fisma_Yui_Form_Button(
            'commentButton',
            array(
                'label' => 'Add Comment',
                'onClickFunction' => 'Fisma.Commentable.showPanel',
                'onClickArgument' => array(
                    'id' => $id,
                    'type' => 'Vulnerability',
                    'callback' => array(
                        'object' => 'Vulnerability',
                        'method' => 'commentCallback'
                    )
                )
            )
        );

        if (!$this->_acl->hasPrivilegeForObject('comment', $vulnerability)) {
            $commentButton->readOnly = true;
        }

        $this->view->commentButton = $commentButton;
        $this->_helper->layout->setLayout('ajax');
    }

    /**
     * Display basic data about the vulnerability
     *
     * @GETAllowed
     * @return void
     */
    function vulnerabilityAction()
    {
        $this->_viewVulnerability();
        $this->view->keywords = $this->_request->getParam('keywords');
        $this->_helper->layout->setLayout('ajax');

        $vulnerability = $this->view->vulnerability;
        $this->view->base = $vulnerability->cvssBaseScore;

        $cvss = new Fisma_Vulnerability_Cvss;

        $this->view->vector = $vulnerability->cvssVector;
        if ($cvss->parseVector($vulnerability->cvssVector)) {
            $cvss->calculate();
            $this->view->baseVectorLabels = $cvss->getBaseVectorLabels();
            $this->view->temporalVectorArray = $cvss->getTemporalVectorArray();
            $this->view->environmentalVectorArray = $cvss->getEnvironmentalVectorArray();
            $this->view->cvss = true;
        } elseif ($vulnerability->cvssBaseScore) {
            $this->view->cvss = true;
            $this->view->vector = 'Not Provided by Scanner';

            $baseVectorLabels = $cvss->getBaseVectorLabels();
            foreach ($baseVectorLabels as &$baseVectorLabel) {
                $baseVectorLabel = 'Unknown';
            }
            $this->view->baseVectorLabels = $baseVectorLabels;
        } else {
            $this->view->cvss = false;
        }

        $discoveredDate = new Zend_Date($vulnerability->discoveredDate, Fisma_Date::FORMAT_DATE);
        $discoveredDate->setTimezone(CurrentUser::getAttribute('timezone'));
        $this->view->discoveredDate = $discoveredDate->toString(Fisma_Date::FORMAT_MONTH_DAY_YEAR);

        $createdDate = new Zend_Date($vulnerability->createdTs, Fisma_Date::FORMAT_DATE);
        $createdDate->setTimezone(CurrentUser::getAttribute('timezone'));
        $this->view->createdTs = $createdDate->toString(Fisma_Date::FORMAT_MONTH_DAY_YEAR);

        if (!is_null($vulnerability->closedTs)) {
            $closedDate = new Zend_Date($vulnerability->closedTs, Fisma_Date::FORMAT_DATE);
            $closedDate->setTimezone(CurrentUser::getAttribute('timezone'));
            $this->view->closedTs = $closedDate->toString(Fisma_Date::FORMAT_MONTH_DAY_YEAR);
        }

        $this->view->editable = $this->_acl->hasPrivilegeForObject('update', $vulnerability);
    }

    /**
     * Display the audit log associated with a vulnerability
     *
     * @GETAllowed
     * @return void
     */
    function auditLogAction()
    {
        $this->_viewVulnerability();
        $this->_helper->layout->setLayout('ajax');

        $logs = $this->view->vulnerability->getAuditLog()->fetch(Doctrine::HYDRATE_SCALAR);

        $logRows = array();

        foreach ($logs as $log) {
            $logRows[] = array(
                'timestamp' => $log['o_createdTs'],
                'user' => (empty($log['u_id'])) ? '' : $this->view->userInfo($log['u_displayName'], $log['u_id']),
                'message' => $this->view->textToHtml($this->view->escape($log['o_message']))
            );
        }

        $dataTable = new Fisma_Yui_DataTable_Local();

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Timestamp',
                true,
                null,
                null,
                'timestamp'
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'User',
                true,
                'Fisma.TableFormat.formatHtml',
                null,
                'username'
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Message',
                false,
                'Fisma.TableFormat.formatHtml',
                null,
                'message'
            )
        );

        $dataTable->setData($logRows);

        $this->view->dataTable = $dataTable;
    }

    /**
     * Ajax view of the upload history for a vulnerability
     *
     * @GETAllowed
     * @return void
     */
    public function uploadHistoryAction()
    {
        $this->_viewVulnerability();

        $rows = array();
        foreach ($this->view->vulnerability->VulnerabilityUploads as $vUpload) {
            $upload = $vUpload->Upload;

            $createdTs = new Zend_Date($upload->createdTs, Fisma_Date::FORMAT_DATETIME);
            $createdTs->setTimezone('UTC');
            $createdDateTime = $createdTs->toString(Fisma_Date::FORMAT_MONTH_DAY_YEAR)
                                  . ' at '
                                  . $createdTs->toString(Fisma_Date::FORMAT_AM_PM_TIME);
            $createdTs->setTimezone(CurrentUser::getAttribute('timezone'));
            $createdDateTimeLocal = $createdTs->toString(Fisma_Date::FORMAT_MONTH_DAY_YEAR)
                                  . ' at '
                                  . $createdTs->toString(Fisma_Date::FORMAT_AM_PM_TIME);

            $user = $upload->User;
            $rows[] = array(
                'date' => Zend_Json::encode(array("local" => $createdDateTimeLocal, "utc" => $createdDateTime)),
                'user' => $this->view->userInfo($user->displayName, $user->id),
                'action' => ucfirst(strtolower($vUpload->action))
            );
        }

        $this->_helper->layout->setLayout('ajax');

        $dataTable = new Fisma_Yui_DataTable_Local();

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Date',
                true,
                'Fisma.TableFormat.formatDateTimeLocal',
                null,
                'date'
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'User',
                true,
                'Fisma.TableFormat.formatHtml',
                null,
                'user'
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Action',
                true,
                null,
                null,
                'action'
            )
        );

        $dataTable->setData($rows);

        $this->view->dataTable = $dataTable;
    }

    private function _viewVulnerability()
    {
        $id = $this->_request->getParam('id');
        $vulnerability = $this->_getSubject($id);

        // Check that the user is permitted to view this vulnerability
        $this->_acl->requirePrivilegeForObject('read', $vulnerability);

        $this->view->vulnerability = $vulnerability;

        $nextDueDate = new Zend_Date($vulnerability->nextDueDate, Fisma_Date::FORMAT_DATE);
        if (is_null($vulnerability->nextDueDate)) {
            $workflowOnTimeState = 'N/A';
        } else {
            $workflowCompare = $nextDueDate->compareDate(new Zend_Date());
            $workflowOnTimeState = (($workflowCompare >= 0)
                ? (($workflowCompare > 0)
                    ? ('On Time' . ', ' .
                        ceil(abs(($nextDueDate->getTimestamp() - time("now"))/(60*60*24))) .
                        ' day(s) remaining.')
                    : 'Due Today'
                )
                : (
                    'Overdue by ' .
                    floor(abs(($nextDueDate->getTimestamp() - time("now"))/(60*60*24))) .
                    ' day(s).'
                )
            );
        }
        $this->view->workflowOnTimeState = $workflowOnTimeState;
    }

    /**
     * Override to set a better plural name.
     */
    public function getPluralModelName()
    {
        return 'Vulnerabilities';
    }

    /**
     * Override in order to remove the "Create new" button, which does not make sense for vulnerabilities. Instead,
     * add an "upload vulnerabilities" button.
     *
     * @param Fisma_Doctrine_Record $record The object for which this toolbar applies, or null if not applicable
     * @return array Array of Fisma_Yui_Form_Button
     */
    public function getToolbarButtons(Fisma_Doctrine_Record $record = null, $fromSearchUrlParams = null)
    {
        $buttons = parent::getToolbarButtons($record);
        $view = $this->view;

        if (CurrentUser::getInstance()->acl()->hasPrivilegeForClass('create', 'Vulnerability')) {
            $button = new Fisma_Yui_Form_Button_Link(
                'toolbarUploadVulnerabilitiesButton',
                array(
                    'value' => 'Import',
                    'imageSrc' => '/images/up.png',
                    'href' => '/vm/vulnerability/plugin'
                )
            );

            $buttons['create'] = $button;
        } else {
            if (isset($buttons['create'])) {
                unset($buttons['create']);
            }
        }

        return $buttons;
    }

    /**
     * Modify the finding
     *
     * @return void
     */
    public function modifyAction()
    {
        $id = $this->_request->getParam('id');

        $fromSearchParams = $this->_getFromSearchParams($this->_request);
        $fromSearchUrl = $this->_helper->makeUrlParams($fromSearchParams);

        $findingData = $this->_request->getPost('vulnerability', array());

        $this->_forward('view', null, null, array('id' => $id));

        $vulnerability = $this->_getSubject($id);
        $this->_acl->requirePrivilegeForObject('update', $vulnerability);

        try {
            Doctrine_Manager::connection()->beginTransaction();
            $vulnerability->merge($findingData);
            $vulnerability->save();
            Doctrine_Manager::connection()->commit();

            $this->_redirect("/vm/vulnerability/view/id/$id$fromSearchUrl");
        } catch (Fisma_Zend_Exception_User $e) {
            $this->view->priorityMessenger($e->getMessage(), 'warning');
        } catch (Exception $e) {
            Doctrine_Manager::connection()->rollback();
            $message = "Error: Unable to update vulnerability. ";
            if (Fisma::debug()) {
                $message .= $e->getMessage();
            }
            $model = 'warning';
            $this->view->priorityMessenger($message, $model);
        }
    }

    /**
     * Display file artifacts associated with an vulnerability
     *
     * @GETAllowed
     */
    public function artifactsAction()
    {
        $id = $this->_request->getParam('id');
        $this->view->assign('id', $id);
        $vulnerability = Doctrine_Query::create()
                            ->from('Vulnerability v')
                            ->leftJoin('v.Attachments a')
                            ->where('v.id = ?', $id)
                            ->execute()
                            ->getLast();

        $this->_acl->requirePrivilegeForObject('read', $vulnerability);

        // Upload button
        $uploadPanelButton = new Fisma_Yui_Form_Button(
            'uploadPanelButton',
            array(
                'label' => 'Upload New ' . $this->view->escape($this->view->translate('Vulnerability_Attachment')),
                'onClickFunction' => 'Fisma.AttachArtifacts.showPanel',
                'onClickArgument' => array(
                    'id' => $id,
                    'server' => array(
                        'controller' => 'vm/vulnerability',
                        'action' => 'attach-artifact'
                    ),
                    'callback' => array(
                        'object' => 'Vulnerability',
                        'method' => 'attachArtifactCallback'
                    ),
                    'title' => 'Upload New ' . $this->view->escape($this->view->translate('Vulnerability_Attachment'))
                )
            )
        );

        if (!$this->_acl->hasPrivilegeForObject('update', $vulnerability)) {
            $uploadPanelButton->readOnly = true;
        }

        $this->view->uploadPanelButton = $uploadPanelButton;

        /**
         * Get artifact data as Doctrine Collection. Loop over to get icon URLs and file size, then convert to array
         * for view binding.
         */
        $artifactCollection = $vulnerability->Attachments;
        $artifactRows = array();

        foreach ($artifactCollection as $artifact) {
            $createdTs = new Zend_Date($artifact->createdTs, Fisma_Date::FORMAT_DATETIME);
            $createdTs->setTimezone('UTC');
            $createdDateTime = $createdTs->toString(Fisma_Date::FORMAT_MONTH_DAY_YEAR)
                                  . ' at '
                                  . $createdTs->toString(Fisma_Date::FORMAT_AM_PM_TIME);
            $createdTs->setTimezone(CurrentUser::getAttribute('timezone'));
            $createdDateTimeLocal = $createdTs->toString(Fisma_Date::FORMAT_MONTH_DAY_YEAR)
                                  . ' at '
                                  . $createdTs->toString(Fisma_Date::FORMAT_AM_PM_TIME);

            $downloadUrl = '/vm/vulnerability/download-artifact/id/' . $id . '/artifactId/' . $artifact->id;
            $artifactRows[] = array(
                'iconUrl'  => "<a href='$downloadUrl'><img alt='"
                            . $this->view->escape($artifact->getFileType())
                            . "'' src='"
                            . $this->view->escape($artifact->getIconUrl())
                            . "'></a>",
                'fileName' => $this->view->escape($artifact->fileName),
                'fileNameLink' => "<a href='$downloadUrl'>" . $this->view->escape($artifact->fileName) . "</a>",
                'fileSize' => $artifact->getFileSize(),
                'user'     => $this->view->userInfo($artifact->User->displayName, $artifact->User->id),
                'date'     => Zend_Json::encode(array("local" => $createdDateTimeLocal, "utc" => $createdDateTime)),
                'comment'  => $this->view->textToHtml($this->view->escape($artifact->description)),
                'delete' => (($artifact->User->id === CurrentUser::getAttribute('id'))
                    ? '/vm/vulnerability/delete-artifact/id/' . $id . '/artifactId/' . $artifact->id
                    : ''
                )
            );
        }

        $dataTable = new Fisma_Yui_DataTable_Local();

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Icon',
                false,
                'Fisma.TableFormat.formatHtml',
                null,
                'icon'
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'File Name',
                true,
                'Fisma.TableFormat.formatHtml',
                null,
                'fileName',
                true
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'File Name',
                true,
                'Fisma.TableFormat.formatHtml',
                null,
                'fileNameLink',
                false,
                'string',
                'fileName'
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Size',
                true,
                'Fisma.TableFormat.formatFileSize',
                null,
                'size',
                false,
                'number'
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Uploaded By',
                true,
                'Fisma.TableFormat.formatHtml',
                null,
                'user'
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Upload Date',
                true,
                'Fisma.TableFormat.formatDateTimeLocal',
                null,
                'date'
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Comment',
                false,
                'Fisma.TableFormat.formatHtml',
                null,
                'comment'
            )
        );

        $dataTable->addColumn(
            new Fisma_Yui_DataTable_Column(
                'Action',
                false,
                'Fisma.TableFormat.deleteControl',
                null,
                'delete'
            )
        );

        $dataTable->setData($artifactRows);

        $this->view->dataTable = $dataTable;
    }

    /**
     * Attach a new artifact to this vulnerabilirt
     *
     * This is called asychronously through the attach artifacts behavior. This is a bit hacky since it is invoked
     * by YUI's asynchronous file upload. This means the response is written to an iframe, so we can't render this view
     * as JSON.
     *
     * Instead, we render an HTML view with the JSON-serialized response inside it.
     *
     * @GETAllowed
     */
    public function attachArtifactAction()
    {
        $id = $this->getRequest()->getParam('id');
        $comment = $this->getRequest()->getParam('comment');

        $this->_helper->layout->disableLayout();

        $response = new Fisma_AsyncResponse();

        try {
            $vulnerability = Doctrine_Query::create()
                            ->from('Vulnerability v')
                            ->leftJoin('v.Attachments a')
                            ->where('v.id = ?', $id)
                            ->execute()
                            ->getLast();

            $this->_acl->requirePrivilegeForObject('update', $vulnerability);

            $file = $_FILES['file'];
            if (Fisma_FileManager::getUploadFileError($file)) {
               $error = Fisma_FileManager::getUploadFileError($file);
               throw new Fisma_Zend_Exception_User($error);
            }

            $vulnerability->attach($_FILES['file'], $comment);
            $vulnerability->save();

        } catch (Fisma_Zend_Exception_User $e) {
            $response->fail($e->getMessage());
        } catch (Exception $e) {
            if (Fisma::debug()) {
                $response->fail("Failure (debug mode): " . $e->getMessage());
            } else {
                $response->fail("Internal system error. File not uploaded.");
            }

            $this->getInvokeArg('bootstrap')->getResource('log')->err($e->getMessage() . "\n" . $e->getTraceAsString());
        }

        $this->view->response = json_encode($response);

        if ($response->success) {
            $this->view->priorityMessenger('Artifact uploaded successfully', 'notice');
        }
    }

    /**
     * Download an artifact to the user's browser
     *
     * @GETAllowed
     */
    public function downloadArtifactAction()
    {
        $vulnerabilityId = $this->getRequest()->getParam('id');
        $artifactId = $this->getRequest()->getParam('artifactId');

        // If user can view this artifact's vulnerability, then they can download the artifact itself
        $vulnerability = Doctrine::getTable('Vulnerability')->find($vulnerabilityId);

        $this->_acl->requirePrivilegeForObject('read', $vulnerability);

        // Send artifact to browser
        $upload = Doctrine::getTable('Upload')->find($artifactId);
        $this->_helper->downloadAttachment($upload->fileHash, $upload->fileName);
    }

    /**
     * Delete artifact
     */
    public function deleteArtifactAction()
    {
        $this->_helper->layout->disableLayout();
        $this->_helper->viewRenderer->setNoRender(true);

        $id = $this->_request->getParam('id');
        $artifactId = $this->_request->getParam('artifactId');

        $vulnerability = Doctrine::getTable('Vulnerability')
            ->getAttachmentQuery($id, $artifactId)->execute()->getLast();

        if (empty($vulnerability)) {
            throw new Fisma_Zend_Exception_User('Invalid vulnerability ID');
        }

        if ($vulnerability->Attachments->count() <= 0) {
            throw new Fisma_Zend_Exception_User('Invalid artifact ID');
        }

        // There is no ACL defined for artifact objects, access is only based on the associated vulnerability:
        $this->_acl->requirePrivilegeForObject('update', $vulnerability);

        $message =
            "Artifact deleted: {$vulnerability->Attachments[0]->fileName} (#{$vulnerability->Attachments[0]->id})";
        $vulnerability->Attachments->remove(0);
        $vulnerability->save();

        $vulnerability->getAuditLog()->write($message);
        if ($returnUrl = $this->getRequest()->getParam('returnUrl')) {
            $this->_redirect($returnUrl);
        }
    }
}
