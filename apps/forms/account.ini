; This is the form for creating, updating, and reading user account information.
; This form should be loaded through FormManager::loadForm() in order to recieve
; the proper decorators, filters, etc.
;
; Author    Mark E. Haase <mhaase@endeavorsystems.com
; Copyright (c) Endeavor Systems, Inc. 2008 (http://www.endeavorsystems.com)
; License   http://www.openfisma.org/mw/index.php?title=License
; Version   $Id:$

[account]
action = "/panel/account/sub/save"

elements.account.type = "text"
elements.account.options.label = "Username"
elements.account.options.required = true
elements.account.options.attribs.size = 35
elements.account.options.filters.lower.filter = "StringToLower"
displayGroups.accountInfo.elements.account = "account"

elements.password.type = "password"
elements.password.options.label = "Password"
elements.password.options.required = true
elements.password.options.attribs.size = 35
elements.password.options.validators.strlen.validator = "StringLength"
elements.password.options.validators.strlen.options.min = "6"
displayGroups.accountInfo.elements.password = "password"

elements.confirm_password.type = "password"
elements.confirm_password.options.label = "Confirm Password"
elements.confirm_password.options.required = true
elements.confirm_password.options.attribs.size = 35
displayGroups.accountInfo.elements.confirm_password = "confirm_password"

elements.name_first.type = "text"
elements.name_first.options.label = "First Name"
elements.name_first.options.required = true
elements.name_first.options.attribs.size = 35
elements.name_first.options.validators.alnum.validator = "alnum"
displayGroups.accountInfo.elements.name_first = "name_first"

elements.name_last.type = "text"
elements.name_last.options.label = "Last Name"
elements.name_last.options.required = true
elements.name_last.options.attribs.size = 35
elements.name_last.options.validators.alnum.validator = "alnum"
displayGroups.accountInfo.elements.name_last = "name_last"

elements.phone_office.type = "text"
elements.phone_office.options.label = "Office Phone"
elements.phone_office.options.attribs.size = 35
displayGroups.accountInfo.elements.phone_office = "phone_office"

elements.phone_mobile.type = "text"
elements.phone_mobile.options.label = "Mobile Phone"
elements.phone_mobile.options.attribs.size = 35
displayGroups.accountInfo.elements.phone_mobile = "phone_mobile"

elements.email.type = "text"
elements.email.options.label = "E-Mail"
elements.email.options.required = true
elements.email.options.attribs.size = 35
elements.email.options.validators.email.validator = "EmailAddress"
displayGroups.accountInfo.elements.email = "email"

; The roles are populated dynamically in the account controller since they can
; change at any time.
elements.role.type = "select"
elements.role.options.label = "Role"
elements.role.options.required = true
displayGroups.accountInfo.elements.roles = "role"

elements.title.type = "text"
elements.title.options.label = "Title"
elements.title.options.attribs.size = 35
elements.title.options.validators.alnum.validator = "alnum"
displayGroups.accountInfo.elements.title = "title"

; The values in the status menu are populated dynamically. I don't think that
; it's possible to correctly populate those values here, even though they are
; static (ie. "Active" and "Locked").
elements.is_active.type = "select"
elements.is_active.options.label = "Status"
displayGroups.accountInfo.elements.is_active = "is_active"

elements.submit.type = "submit"
elements.submit.options.value = "Create"
displayGroups.accountInfo.elements.submit = "submit"

; The systems part of the account form is generated dynamically at runtime