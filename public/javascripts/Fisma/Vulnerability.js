/**
 * Copyright (c) 2010 Endeavor Systems, Inc.
 *
 * This file is part of OpenFISMA.
 *
 * OpenFISMA is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * OpenFISMA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with OpenFISMA.  If not, see
 * {@link http://www.gnu.org/licenses/}.
 *
 * @fileoverview Client-side behavior related to the Vulnerability module.  Adapted from Fisma.Finding.
 *
 * @author    Andrew Reeves <andrew.reeves@endeavorsystems.com>
 * @copyright (c) Endeavor Systems, Inc. 2010 (http://www.endeavorsystems.com)
 * @license   http://www.openfisma.org/content/license
 */

Fisma.Vulnerability = {
    /**
     * A reference to a YUI table which contains comments for the current page
     *
     * This reference will be set when the page loads by the script which initializes the table
     */
    commentTable : null,

    /**
     * This is called after an artifact has been uploaded successfully. We could do something nifty here like
     * dynamically update the page, but at the moment I'm going to be lazy and just refresh the entire page.
     *
     * @param yuiPanel This is required for a callback but not used here
     */
    attachArtifactCallback : function (yuiPanel) {
        window.location = window.location.href;
    },

    /**
     * Handle successful comment events by inserting the latest comment into the top of the comment table
     *
     * @param comment An object containing the comment record values
     * @param yuiPanel A reference to the modal YUI dialog
     */
    commentCallback : function (comment, yuiPanel) {

        var that = this;

        var commentRow = {
            'timestamp' : comment.createdTs,
            'username' : comment.username,
            'comment' : comment.comment,
            'delete' :
                '/comment/remove/format/json/type/Vulnerability/' +
                'commentId/' + comment.id +
                '/id/' + Fisma.Commentable.config.id
        };

        this.commentTable = Fisma.Registry.get('comments');

        this.commentTable.addRow(commentRow);

        /*
         * Redo the sort. If the user had some other sort applied, then our element might be inserted in
         * the wrong place and the sort would be wrong.
         */
        this.commentTable.sortColumn(this.commentTable.getColumn(0), YAHOO.widget.DataTable.CLASS_DESC);

        // Highlight the added row so the user can see that it worked
        var rowBlinker = new Fisma.Blinker(
            100,
            6,
            function () {
                that.commentTable.highlightRow(0);
            },
            function () {
                that.commentTable.unhighlightRow(0);
            }
        );

        rowBlinker.start();

        // Update the comment count in the tab UI
        var commentCountEl = document.getElementById('vulnerabilityCommentsCount').firstChild;
        commentCountEl.nodeValue++;

        // Hide YUI dialog
        yuiPanel.hide();
        yuiPanel.destroy();
    },

    /**
     * Display create form panel for Network and System
     */
    displayCreatePanel : function (element) {
        if (element.value === 'new') {
            var panelConfig = {width : "700px", modal : true},
                model       = (element.name === 'networkId') ? 'network' : 'system',
                panel       = Fisma.UrlPanel.showPanel(
                'Create New ' + model.charAt(0).toUpperCase() + model.slice(1),
                '/' + model + '/form/format/html',
                function () {
                    var sourceMessageBox = new Fisma.MessageBox(document.getElementById("sourceMessageBar"));
                    Fisma.Registry.get("messageBoxStack").push(sourceMessageBox);

                    // The form contains some scripts that need to be executed
                    var scriptNodes = panel.body.getElementsByTagName('script');

                    var i;
                    for (i = 0; i < scriptNodes.length; i++) {
                        try {
                            eval(scriptNodes[i].text);
                        } catch (e) {
                            var message = 'Not able to execute one of the scripts embedded in this page: ' + e.message;
                            Fisma.Util.message(message, 'warning');
                        }
                    }
                },
                'createSourcePanel',
                panelConfig
            );

            panel.subscribe("hide", function() {
                Fisma.Registry.get("messageBoxStack").pop();
                setTimeout(function () {
                    panel.destroy();
                    panel = null;
                }, 0);
            }, this, true);

            if (model === 'network') {
                Fisma.Vulnerability.createNetworkPanel = panel;
            } else {
                Fisma.Vulnerability.createSystemPanel = panel;
            }
        }
    },

    /**
     * Submit an XHR to create a Finding Source
     */
    submitPanel : function () {
        // The scope is the button that was clicked, so save it for closures
        var saveButton  = this,
            panel       = (Fisma.Vulnerability.createNetworkPanel)
                        ? Fisma.Vulnerability.createNetworkPanel
                        : Fisma.Vulnerability.createSystemPanel,
            model       = (Fisma.Vulnerability.createNetworkPanel) ? 'network' : 'system',
            form        = panel.body.getElementsByTagName('form')[0];

        // Disable the submit button
        $(saveButton).attr("disabled", true);

        // Save the created name so we can populate it back on the scan upload form
        var displayName = document.getElementById("nickname").value + ' - ' + document.getElementById("name").value;

        YAHOO.util.Connect.setForm(form);
        YAHOO.util.Connect.asyncRequest('POST', '/' + model + '/create/format/json', {
            success : function(o) {
                var result;

                try {
                    result = YAHOO.lang.JSON.parse(o.responseText).result;
                } catch (e) {
                    result = {success : false, message : e};
                }

                if (result.success) {
                    panel.hide();

                    // Insert the new source into the <select>
                    var modelId = parseInt(result.message, 10);
                    var newOption = document.createElement('option');
                    newOption.value = modelId;
                    newOption.appendChild(document.createTextNode(displayName));
                    newOption.selected = true;
                    jQuery('#' + ((model == 'network') ? model : 'orgSystem') + 'Id > option[value="new"]')
                        .after(newOption);
                    Fisma.Util.message('A ' + model + ' has been created.', 'info', true);
                } else {
                    Fisma.Util.message(result.message, 'warning', true);
                    $(saveButton).attr("disabled", null);
                }
            },
            failure : function(o) {
                var alertMessage = 'Failed to create new ' + model + ': ' + o.statusText;
                panel.setBody(alertMessage);
            }
        }, null);
    },

    /**
     * Hide the panel when user click "Cancel"
     */
    closePanel : function () {
        if (Fisma.Vulnerability.createNetworkPanel) {
            Fisma.Vulnerability.createNetworkPanel.hide();
        }
    }
};
