<?php
/**
 * Copyright (c) 2011 Endeavor Systems, Inc.
 *
 * This file is part of OpenFISMA.
 *
 * OpenFISMA is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * OpenFISMA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with OpenFISMA.  If not, see
 * {@link http://www.gnu.org/licenses/}.
 */

require_once(realpath(dirname(__FILE__) . '/../../Case/Unit.php'));

/**
 * test /library/Fisma/Hash.php
 *
 * @author     Duy K. Bui <duy.bui@endeavorsystems.com>
 * @copyright  (c) Endeavor Systems, Inc. 2011 {@link http://www.endeavorsystems.com}
 * @license    http://www.openfisma.org/content/license GPLv3
 * @package    Test
 * @subpackage Test_Library
 */
class Test_Library_Fisma_Hash extends Test_Case_Unit
{
    /**
     * Testing the hash function with sha1, md5, sha256, and unsupported
     *
     * @return void
     */
    public function testHash()
    {
        $originalString = '@ V3Ry C0MPL1CaTeD STR1NG';

        $sha1String = 'fa99f9b2d88f85e16617278e29177cdafae13160'; //generated by http://www.sha1.cz/
        $this->assertEquals($sha1String, Fisma_Hash::hash($originalString, 'sha1'));
        
        $sha256String = '25f4f8161b4281e4b816162b697c452dcc99b417ef0c6eefc8f5561746e517d0'; //generated by http://www.xorbin.com/tools/sha256-hash-calculator        
        $this->assertEquals($sha256String, bin2hex(Fisma_Hash::hash($originalString, 'sha256')));

        $md5String = 'decc78e0f691e0933492df30b35b763e'; //generated by http://7thspace.com/webmaster_tools/online_md5_encoder.html
        $this->assertEquals($md5String, Fisma_Hash::hash($originalString, 'md5'));
        
        $unsupportedHashType = 'blowfish';
        $this->setExpectedException('Fisma_Zend_Exception', 'Unsupported hash type: '.$unsupportedHashType.'');
        Fisma_Hash::hash($originalString, $unsupportedHashType);
    }

    public function testPrivateConstructor()
    {
        $this->setExpectedException('Fisma_Zend_Exception', Fisma_Hash::CLASS_STATIC_ERROR);
        new Fisma_Hash();
    }
}

